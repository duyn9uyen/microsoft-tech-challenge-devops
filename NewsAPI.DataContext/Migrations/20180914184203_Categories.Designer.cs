// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewsAPI.DataContext;

namespace NewsAPI.DataContext.Migrations
{
    [DbContext(typeof(NewsApiContext))]
    [Migration("20180914184203_Categories")]
    partial class Categories
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("NewsAPI.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<string>("FullStory")
                        .IsRequired();

                    b.Property<bool>("HasVideoPlaceholder");

                    b.Property<string>("HeadLine")
                        .IsRequired();

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<bool>("Nsfw");

                    b.Property<int>("NumberOfImages");

                    b.Property<string>("Snippet")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("NewsAPI.Models.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Message")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Banners");

                    b.HasData(
                        new { Id = 1, Message = "Josh Stickles T-Shirts and Temporary Tatoos Now Available in the CapTech Store." },
                        new { Id = 2, Message = "Available For a Limited Time Only, $19.99 + s/h." }
                    );
                });

            modelBuilder.Entity("NewsAPI.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = 1, DisplayName = "WORLD", ShortName = "world" },
                        new { Id = 2, DisplayName = "BUSINESS", ShortName = "business" },
                        new { Id = 3, DisplayName = "SPORTS", ShortName = "sports" },
                        new { Id = 4, DisplayName = "FASHION & STYLE", ShortName = "fashion" },
                        new { Id = 5, DisplayName = "VIDEO", ShortName = "video" },
                        new { Id = 6, DisplayName = "OPINION", ShortName = "opinion" },
                        new { Id = 7, DisplayName = "TRAVEL", ShortName = "travel" }
                    );
                });

            modelBuilder.Entity("NewsAPI.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArticleId");

                    b.Property<string>("CommentText")
                        .IsRequired();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("EmailAddress")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("NewsAPI.Models.FeaturedSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("FeaturedSections");
                });

            modelBuilder.Entity("NewsAPI.Models.FeaturedSectionArticles", b =>
                {
                    b.Property<int>("ArticleID");

                    b.Property<int>("FeaturedSectionID");

                    b.HasKey("ArticleID", "FeaturedSectionID");

                    b.HasIndex("FeaturedSectionID");

                    b.ToTable("FeaturedSectionArticles");
                });

            modelBuilder.Entity("NewsAPI.Models.RelatedArticles", b =>
                {
                    b.Property<int>("ArticleID");

                    b.Property<int>("RelatedArticleID");

                    b.HasKey("ArticleID", "RelatedArticleID");

                    b.HasIndex("RelatedArticleID");

                    b.ToTable("RelatedArticles");
                });

            modelBuilder.Entity("NewsAPI.Models.Article", b =>
                {
                    b.HasOne("NewsAPI.Models.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NewsAPI.Models.Comment", b =>
                {
                    b.HasOne("NewsAPI.Models.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NewsAPI.Models.FeaturedSectionArticles", b =>
                {
                    b.HasOne("NewsAPI.Models.Article", "Article")
                        .WithMany("FeaturedSectionArticles")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NewsAPI.Models.FeaturedSection", "FeaturedSection")
                        .WithMany("FeaturedSectionArticles")
                        .HasForeignKey("FeaturedSectionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NewsAPI.Models.RelatedArticles", b =>
                {
                    b.HasOne("NewsAPI.Models.Article", "Article")
                        .WithMany("RelatedArticles")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NewsAPI.Models.Article", "RelatedArticle")
                        .WithMany()
                        .HasForeignKey("RelatedArticleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
